// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract NFTrader is ERC721Enumerable, Ownable {
    uint256 public tokenCounter;
    uint256 public mintPrice = 0.00 ether;
    bool public mintingEnabled = true;

    struct NFTMetadata {
        string name;
        string description;
        string uri;
    }

    struct Sale {
        address seller;
        uint256 price;
        bool isForSale;
    }

    mapping(uint256 => NFTMetadata) private _tokenMetadata;
    mapping(uint256 => Sale) public tokenSales;

    constructor(address initialOwner) 
        ERC721("NFTrader", "NFTr")
        Ownable(initialOwner)
    {
        tokenCounter = 0;
    }

    function setMintPrice(uint256 _price) public onlyOwner {
        mintPrice = _price;
    }

    function toggleMinting() public onlyOwner {
        mintingEnabled = !mintingEnabled;
    }

    function mintNFT(
        address recipient,
        string memory name,
        string memory description,
        string memory uri
    ) public payable returns (uint256) {
        require(mintingEnabled, "Minting is not enabled");
        require(msg.value >= mintPrice, "Insufficient payment");
        
        uint256 newTokenId = tokenCounter;
        _safeMint(recipient, newTokenId);

        _tokenMetadata[newTokenId] = NFTMetadata({
            name: name,
            description: description,
            uri: uri
        });

        tokenCounter++;
        return newTokenId;
    }

        function withdraw() public onlyOwner {
        uint256 balance = address(this).balance;
        payable(owner()).transfer(balance);
    }

    function tokenMetadata(uint256 tokenId)
        public
        view
        returns (
            string memory name,
            string memory description,
            string memory uri
        )
    {
        require(_ownerOf(tokenId) != address(0), "Token does not exist");
        NFTMetadata memory metadata = _tokenMetadata[tokenId];
        return (metadata.name, metadata.description, metadata.uri);
    }

    function tokensOfOwner(address owner) public view returns (uint256[] memory) {
        uint256 balance = balanceOf(owner);
        uint256[] memory tokenIds = new uint256[](balance);

        for (uint256 i = 0; i < balance; i++) {
            tokenIds[i] = tokenOfOwnerByIndex(owner, i);
        }

        return tokenIds;
    }

    // Internal helper function
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
        address owner = ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    // Sale Functions
    function listForSale(uint256 tokenId, uint256 price) public {
        require(_isApprovedOrOwner(msg.sender, tokenId), "Caller is not owner nor approved");
        require(price > 0, "Price must be greater than zero");

        tokenSales[tokenId] = Sale({
            seller: msg.sender,
            price: price,
            isForSale: true
        });
    }

    function cancelSale(uint256 tokenId) public {
        require(tokenSales[tokenId].seller == msg.sender, "Only seller can cancel the sale");
        require(tokenSales[tokenId].isForSale, "Token is not for sale");

        tokenSales[tokenId].isForSale = false;
    }

    function buyNFT(uint256 tokenId) public payable {
        Sale memory sale = tokenSales[tokenId];
        require(sale.isForSale, "Token is not for sale");
        require(msg.value >= sale.price, "Insufficient payment");

        address seller = sale.seller;
        require(seller != msg.sender, "Buyer cannot be the seller");

        // Transfer ownership
        _transfer(seller, msg.sender, tokenId);

        // Clear sale listing
        tokenSales[tokenId].isForSale = false;

        // Transfer funds to seller
        payable(seller).transfer(msg.value);
    }

    function getSaleDetails(uint256 tokenId) public view 
        returns (address seller, uint256 price, bool isForSale) 
    {
        Sale memory sale = tokenSales[tokenId];
        return (sale.seller, sale.price, sale.isForSale);
    }

    function updateTokenURI(uint256 tokenId, string memory newUri) public 
    {
        require(_isApprovedOrOwner(msg.sender, tokenId), "Caller is not owner nor approved");
        _tokenMetadata[tokenId].uri = newUri;
    }
}
